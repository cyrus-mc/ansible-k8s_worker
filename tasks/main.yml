---
- name: Create directories /etc/kubernetes/manifests
  file:
    path: /etc/kubernetes/{{item}}
    state: directory
    mode: 0755
    recurse: no
    owner: root
    group: root
  with_items: [ "manifests", "ssl" ]

- name: Write Kubernetes Manifests
  template:
    src: "{{ item }}.yaml.j2"
    dest: /etc/kubernetes/manifests/{{item}}.yaml
    mode: 0644
    owner: root
    group: root
  with_items: [ "kube-proxy" ]
  tags: kubernetes-manifest

- name: Worker KubeConfig
  template:
    src: worker-kubeconfig.yaml.j2
    dest: /etc/kubernetes/worker-kubeconfig.yaml
    mode: 0644
  tags: kubernetes-config

- name: write kubelet-kubeconfig.yaml
  template:
    src: kubelet-kubeconfig.yaml.j2
    dest: /etc/kubernetes/kubelet-kubeconfig.yaml
    mode: 0644
  tags: kubernetes-config

- name: proxy kubeconfig
  template:
    src: proxy-kubeconfig.yaml.j2
    dest: /etc/kubernetes/proxy-kubeconfig.yaml
    mode: 0644
  tags: kubernetes-config

- name: Kubelet systemd service
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
    mode: 0644
  notify:
  - k8s_worker_kubelet_systemd
  tags: kubelet

- name: Kubelet start
  systemd:
    name: kubelet
    enabled: yes
    state: started

# auto-scaling groups don't propagate tags to volumes, so lets do that outselves

# first filter out any tags that start with aws: as that is reserved by Amazon
- set_fact:
    tags: '{{ k8s_worker_tags }}'
    filtered_tags: {}

- set_fact:
    filtered_tags: "{{ filtered_tags | combine({ item.key: item.value }) }}"
  when: "not item.key | match('^aws:*')"
  with_dict: "{{ tags }}"

- name: gather ec2 facts
  ec2_metadata_facts:
  register: ec2_facts

- name: retrieve all volumes for instance
  ec2_vol:
    instance: '{{ ansible_ec2_instance_id }}'
    region: '{{ ansible_ec2_placement_region }}'
    state: list
  register: ec2_vol

# tag all volumes that were not created by Kubernetes
- name: tag all volumes with instance tags
  ec2_tag:
    region: '{{ ansible_ec2_placement_region }}'
    resource: '{{ item.id }}'
    state: present
    tags: "{{ filtered_tags }}"
  with_items:
  - '{{ ec2_vol.volumes }}'
  when: "'kubernetes.io/created-for/pvc/name' not in item.tags"
